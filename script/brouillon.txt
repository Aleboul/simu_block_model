
d1 = 20
d2 = 30

cols_1 = np.repeat(-1,d1)
cols_2 = np.repeat(1,d2)
cols = np.hstack([cols_1,cols_2])

copula_1 = Logistic(theta = 0.5, n_sample = 200, d = d1)
copula_2 = Logistic(theta = 0.5, n_sample = 200, d = d2)

sample_1 = copula_1.sample_unimargin()
sample_2 = copula_2.sample_unimargin()
w = np.repeat(1/(d1+d2), d1+d2)
sample = np.hstack((sample_1, sample_2))
print(crit(sample,w,cols))


#print(sample)

col = list(np.arange(d1+d2))
rand = random.sample(col, d1+d2)
sample = sample[:,rand]
#print(sample)


#print(log_rank(sample[:,[i,j]], [1/2,1/2]))
#print(copula_1._A([0.5,0.5]))

#cols_1 = np.repeat(-1,15)
#cols_2 = np.repeat(1,20)
#cols = np.hstack([cols_1,cols_2])
#cols = np.arange(d1+d2)
#cols[0] = -1
#cols[1] = -1
#w = np.repeat(1/(d1+d2), d1+d2)
#print(crit(sample,w,cols))

cols = split(sample)

print(sample[:,cols])

print(sample[:,cols].shape[1])

"""
    Petit exemple simple
"""

#d1=5
#d2=5
#d3=20
#copula_1 = Logistic(theta = 0.5, n_sample = 200, d = d1)
#copula_2 = Logistic(theta = 0.5, n_sample = 200, d = d2)
#copula_3 = Logistic(theta = 0.25, n_sample = 200, d = d3)
#sample_1 = copula_1.sample_unimargin()
#sample_2 = copula_2.sample_unimargin()
#sample_3 = copula_3.sample_unimargin()
#
#sample = np.hstack((sample_1, sample_2, sample_3))
#
#cols = np.array([1,1,1,1,1,1.0,1,1,1,1,2.0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2])
#cols = np.arange(0,30)
#cols[4] = 0
#print(cols)
##cols = np.array([2,2,2,2,2,2,2,2,2.0,2,2,2,2,2,2,2,2,2,2,2])
#w = np.repeat(1/(d1+d2+d3), d1+d2+d3)
#print(crit(sample, w, cols))

#cols = np.array([1,1,1,1,1,2,2,2,2,2])
#w = np.repeat(1/d1,d1)
#print(crit(sample_1, w, cols))

### Formes difficles à détecter : créer un petit cluster indépendent des deux et mettre
# tous ses représentants dans le même cluster, on aura peu de différence entre critère si on considère
# deux cluster plutôt que 3. Néanmoins, si le troisième cluster est mélangé, le critère est important.

### De plus, lorsqu'un gros cluster contient plusieurs cluster, le critère ne fait que d'augmenter
# lorsque l'on modifie la partition => utiliser un test d'indépendance?
# Pourquoi ce phénomène, une grande partie des clusters sont ensembles.

"""
    Deuxième petit exemple avec max en dernière coordonnée
"""

#d1 = 9
#d2 = 20
#copula_1 = Logistic(theta = 0.5, n_sample = 2000, d = d1)
#copula_2 = Logistic(theta = 0.25, n_sample = 2000, d = d2)
#sample_1 = copula_1.sample_unimargin()
#sample_2 = copula_2.sample_unimargin()
#
#array = sample_1.max(1).transpose().reshape(2000,1)
#sample_1 = np.hstack((sample_1, array))

#sample = np.hstack((sample_1, sample_2))
#cols = np.array([1,1,1,1,1,1,1,1,1,1,2.0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2])
#w = np.repeat(1/(d1+1+d2), d1+1+d2)
#print(crit(sample, w, cols))

"""
    Troisième exemple avec une asymmetric
"""

#d1 = 4
#d2 = 7
#asy = [0, 0, 0, 0, [0,0], [0,0], [0,0], [0,0], [0,0], [0,0],[.2,.1,.2], [.1,.1,.2], [.3,.4,.1], [.2,.2,.2], [.4,.6,.2,.5]]
#
#copula_1 = Asymmetric_logistic(theta = [0.2,0.5,0.3,0.4], asy = asy, n_sample = 2000, d = d1)
#copula_2 = Logistic(theta = 0.5, n_sample = 2000, d = d2)
#
#sample_1 = copula_1.sample_unimargin()
#sample_2 = copula_2.sample_unimargin()
#
#sample = np.hstack((sample_1, sample_2))
#
#cols = np.array([1,1,1,1,2.0,3,4,5,6,7,8])
#
#w = np.repeat(1/(d1+d2), d1+d2)

#w = simplex(d1+d2, 1)[0]
#print(w)

#print(crit(sample, w, cols))

"""
    Quatrième grande dimension
"""

#d1 = 200
#d2 = 200
#
#copula_1 = Logistic(theta = 0.5, n_sample = 200, d = d1)
#copula_2 = Logistic(theta = 0.25, n_sample = 200, d = d2)
#
#sample_1 = copula_1.sample_unimargin()
#sample_2 = copula_2.sample_unimargin()
#
#sample = np.hstack((sample_1, sample_2))
#print(sample)
#
#col_1 = np.repeat(1,d1-3)
#col_2 = np.repeat(2,d2)
#
#col = np.hstack([col_1,[1,1,1],col_2])
#
#w = np.repeat(1/(d1+d2), d1+d2)
#
#print(crit(sample, w, col))

d1 = 20
d2 = 20

cols_1 = np.repeat(-1,d1)
cols_2 = np.repeat(1,d2)
cols = np.hstack([cols_1,cols_2])

copula_1 = Logistic(theta = 0.4, n_sample = 200, d = d1)
copula_2 = Logistic(theta = 0.8, n_sample = 200, d = d2)

sample_1 = copula_1.sample_unimargin()
sample_2 = copula_2.sample_unimargin()

sample = np.hstack((sample_1, sample_2))
w = np.repeat(1/(d1+d2), d1+d2)
print(crit(sample,w, cols))

col = list(np.arange(d1+d2))
rand = random.sample(col, d1+d2)
sample = sample[:,rand]
cols = split(sample)

print(cols)